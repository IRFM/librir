name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build-ffmpeg:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: 3rd_64
          key: ${{ github.ref }}-3rd_64

      - if: ${{ (steps.cache-dependencies.outputs.cache-hit != 'true') }}
        run: ./configure_ffmpeg

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    needs: build-ffmpeg

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest]
        # python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        
        
        
    - name: Cache Dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: 3rd_64
        key: ${{ github.ref }}-3rd_64
        

        
    - if: ${{ matrix.os  == 'ubuntu-latest'}}
      run: ./build.sh
    - if: ${{ matrix.os  == 'windows-latest'}}
      run: ./build.bat


  test:
    runs-on: ${{ matrix.os }}
    needs: build

    strategy:
      matrix:
        python-version: ["py37", "py38", "py39", "py310", "py311"]
        os: [ubuntu-latest, windows-latest]

    
    steps:
      - uses: actions/checkout@v3
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest pytest-cov
          pip install -e build/install

      - name: Test with pytest
        continue-on-error: true
        run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=librir tests/python -m "not thermavip"  | tee pytest-coverage.txt

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff --format=github --select=E9,F63,F7,F82 --target-version=${{ matrix.python-version }} .
          # default set of ruff rules with GitHub Annotations
          ruff --format=github --target-version=${{ matrix.python-version }} .